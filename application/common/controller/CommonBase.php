<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/5/20
 * Time: 8:48
 */

namespace app\common\controller;

use think\App;
use think\Controller;
use think\Loader;
use think\Response;

class CommonBase extends Controller{
  /*C 风格模块*/
  protected $module = '';
  /*C 风格控制器*/
  protected $controller = '';
  /*C 风格操作*/
  protected $action = '';
  /*模板替换字符串*/
  protected $viewReplaceStr = [];
  /*资源前缀*/
  protected $resourcePrefix = '/';

  protected
  function _initialize() {

    parent::_initialize(); // TODO: Change the autogenerated stub
    /*获取模块、控制器、操作*/
    $this->module = $this->request->module();
    $this->controller = Loader::parseName( $this->request->controller() );
    $this->action = Loader::parseName( $this->request->action() );

    /*设置并获取资源前缀*/
    if ( !config( '?resource_prefix' ) ) {
      $this->resourcePrefix = preg_match( '#public/?$#', input( 'server.document_root' ) ) ? '/' : '/public/';
      config( 'resource_prefix', $this->resourcePrefix );
    }
    $this->resourcePrefix = config( 'resource_prefix' );


    /*获取缓存设置*/
    $cache = config( 'cache' );
    $cache[ 'default' ][ 'cache_subdir' ] = false;
    $cache[ 'default' ][ 'prefix' ] = $this->module . DS . $this->controller;
    $cache[ 'default' ][ 'data_compress' ] = App::$debug;
    /*设置缓存*/
    config( 'cache', $cache );

    /*获取模板替换字符串*/
    $this->viewReplaceStr = [
      '__PUBLIC_STATIC__'  => $this->resourcePrefix . 'static',
      '__PUBLIC_JS__'      => $this->resourcePrefix . 'static/js',
      '__PUBLIC_CSS__'     => $this->resourcePrefix . 'static/css',
      '__PUBLIC_IMAGES__'  => $this->resourcePrefix . 'static/images',
      '__PUBLIC_FONTS__'   => $this->resourcePrefix . 'static/fonts',
      '__PUBLIC_LIBS__'    => $this->resourcePrefix . 'static/libs',
      '__PUBLIC_PLUGINS__' => $this->resourcePrefix . 'static/plugins'
    ];

  }

  protected
  function ajaxReturn( $code, $msg, $data, $type = 'json' ) {
    $result = [
      'code' => $code,
      'msg'  => $msg,
      'data' => $data
    ];

    switch ( strtolower( $type ) ) {
      case 'json': {
        $result = Response::create( $result, 'json' );
        break;
      }
      case 'jsonp': {
        $result = Response::create( $result, 'jsonp' );
        break;
      }
      case 'xml': {
        $result = Response::create( $result, 'xml' );
        break;
      }
      case 'array':
      default: {
        $result = Response::create( $result, 'json' );
        break;
      }
    }

    return $result;
  }

  protected
  function fetch( $template = '', $vars = [], $replace = [], $config = [] ) {
    $replace = array_merge( $this->viewReplaceStr, $replace );

    return parent::fetch( $template, $vars, $replace, $config ); // TODO: Change the autogenerated stub
  }

}
