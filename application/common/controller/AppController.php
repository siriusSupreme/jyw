<?php

namespace app\common\controller;

use think\Controller;
use think\Loader;

class AppController extends Controller {
  /*C 风格模块*/
  protected $module = '';
  /*C 风格控制器*/
  protected $controller = '';
  /*C 风格操作*/
  protected $action = '';
  /*模板替换字符串*/
  protected $viewReplaceStr = [];
  /*资源前缀*/
  protected $resourcePrefix = '/';

  protected
  function _initialize() {
    parent::_initialize(); // TODO: Change the autogenerated stub
    /*获取模块、控制器、操作*/
    $this->module = $this->request->module();
    $this->controller = Loader::parseName( $this->request->controller() );
    $this->action = Loader::parseName( $this->request->action() );

    /*设置并获取资源前缀*/
    if ( !config( '?resource_prefix' )) {
      $this->resourcePrefix=preg_match('#public/?$#',input('server.document_root'))?'/':'/public/';
      config( 'resource_prefix',$this->resourcePrefix );
    }
    $this->resourcePrefix=config('resource_prefix');

    /*主题类型：前台或者后台*/
    if ( $this->module == 'admin' || preg_match( '/admin/i', $this->controller ) ) {
      $themeType = 'admin';
    } else {
      $themeType = 'portal';
    }

    /*获取模板设置*/
    $template = config( 'template' );
    /*设置模板临时缓存目录*/
    $template[ 'cache_path' ] = TEMP_PATH . $this->module . DS . $this->controller . DS;
    /*设置模板缓存*/
    if ( !config( 'app_debug' ) ) {
      $template[ 'cache_id' ] = md5( $this->module . DS . $this->controller . DS . $this->action );
      $template[ 'display_cache' ] = true;
    }
    /*设置模板视图根目录*/
    $template[ 'view_base' ] = THEME_PATH . $themeType . DS . 'default' . DS;
    /*设置模板引擎*/
    $this->engine( $template );


    /*获取缓存设置*/
    $cache = config( 'cache' );
    $cache[ 'default' ][ 'cache_subdir' ] = false;
    $cache[ 'default' ][ 'prefix' ] = $this->module . DS . $this->controller;
    $cache[ 'default' ][ 'data_compress' ] = true;
    /*设置缓存*/
    config( 'cache', $cache );

    /*获取模板替换字符串*/
    $themeTypeUpper = strtoupper( $themeType );
    $this->viewReplaceStr = [
      '__PUBLIC_STATIC__'             => $this->resourcePrefix.'static',
      '__PUBLIC_JS__'                 => $this->resourcePrefix.'static/js',
      '__PUBLIC_CSS__'                => $this->resourcePrefix.'static/css',
      '__PUBLIC_IMAGES__'             => $this->resourcePrefix.'static/images',
      '__PUBLIC_FONTS__'              => $this->resourcePrefix.'static/fonts',
      '__PUBLIC_LIBS__'               => $this->resourcePrefix.'static/libs',
      '__PUBLIC_PLUGINS__'            => $this->resourcePrefix.'static/plugins',
      "__{$themeTypeUpper}_STATIC__"  => $this->resourcePrefix.'theme/admin/default/public/static',
      "__{$themeTypeUpper}_JS__"      => $this->resourcePrefix.'theme/admin/default/public/static/js',
      "__{$themeTypeUpper}_CSS__"     => $this->resourcePrefix.'theme/admin/default/public/static/css',
      "__{$themeTypeUpper}_IMAGES__"  => $this->resourcePrefix.'theme/admin/default/public/static/images',
      "__{$themeTypeUpper}_FONTS__"   => $this->resourcePrefix.'theme/admin/default/public/static/fonts',
      "__{$themeTypeUpper}_LIBS__"    => $this->resourcePrefix.'theme/admin/default/public/static/libs',
      "__{$themeTypeUpper}_PLUGINS__" => $this->resourcePrefix.'theme/admin/default/public/static/plugins'
    ];

  }

  protected function fetch( $template = '', $vars = [], $replace = [], $config = [] ) {
    $replace=array_merge( $this->viewReplaceStr,$replace);
    return parent::fetch( $template, $vars, $replace, $config ); // TODO: Change the autogenerated stub
  }

}
